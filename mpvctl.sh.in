#!/bin/sh

err() {
	printf "Error: %s\n" "$@"
	exit 1
}

usage() {
	cat <<EOFUSAGE
$PROGNAME <cmd> [ARGS...]

COMMANDS:
  play		- start playing
  pause		- pause current file
  stop		- stop and clear playlist
  next		- play next file
  prev		- play previous file
  ls		- list the playlist
  clear		- clear the playlist
  shuffle	- shuffle the playlist
  prop [...]	- get properties
  add [...]	- add parameters to playlist
  album [...]	- play matching albums
  track [...]	- play matching tracks

PIPE:
  find ~/music/ -type f | $PROGNAME
EOFUSAGE
}

cmd() {
	cmd="$1"
	args=""
	idx=0
	shift
	for a in "$@"; do
		[ $(( idx=idx+1 )) -le "$#" ] && args="$args, "
		case "${a}" in
			true|false|[0-9]*) args="${args}${a}" ;;
			*) args="${args}\"${a}\""
		esac
	done
	printf '{ "command": ["%s"%s] }\n' "$cmd" "$args" | $UNIX_SOCK_CMD
}

append() {
	opt="$1"
	[ -n "$opt" ] && shift
	if [ -t 0 ]; then
		for f in "$@"; do
			cmd "loadfile" "${f}" "$opt" >/dev/null
		done
	else
		while read f; do
			cmd "loadfile" "${f}" "$opt" >/dev/null
		done
	fi
}

list() {
	cmd "get_property" "playlist" | "${JQ_CMD}" -M .data[].filename
}

search() {
	type="$1"
	shift
	case "$type" in
		album) $ALBUM_SEARCH_CMD "$@" ;;
		track) $TRACK_SEARCH_CMD "$@" ;;
	esac
}

cli() {
	cmd="$1"
	[ -n "$cmd" ] && shift
	case "$cmd" in
		prop) for p; do cmd "get_property" "$p"; done ;;
		pa|pa[use]*) cmd "set_property" "pause" "true" >/dev/null ;;
		p|p[lay]*) cmd "set_property" "pause" "false" >/dev/null ;;
		s|s[top]*) cmd "stop" >/dev/null ;;
		n|n[ext]*) cmd "playlist-next" >/dev/null ;;
		p|p[rev]*) cmd "playlist-prev" >/dev/null ;;
		add|append) append "append-play" "$@" ;;
		ls|list) list "$@" ;;
		c|c[lear]*) cmd "playlist-clear" >/dev/null ;;
		shuffle) cmd "playlist-shuffle" >/dev/null ;;
		search) search "$@" ;;
		album) search "album" "$@" | append "replace" ;;
		track) search "track" "$@" | append "replace" ;;
		*) usage && exit 1 ;;
	esac
}

: ${PROGNAME:="$0"}
: ${UNIX_SOCK_PATH:="/tmp/mpvd"}

: ${JQ_CMD:=$(command -v jq)}
[ -z "$JQ_CMD" ] && err "could not find jq"

if [ -z "$UNIX_SOCK_CMD" ]; then
	if [ -x $(command -v socat) ]; then
		UNIX_SOCK_CMD="socat - ${UNIX_SOCK_PATH}"
	elif [ -x $(command -v nc) ]; then
		UNIX_SOCK_CMD="nc -U ${UNIX_SOCK_PATH}"
	else
		err "could not find netcat or socat"
	fi
fi

if [ -z "$ALBUM_SEARCH_CMD" ]; then
	if [ -x $(command -v beet) ]; then
		ALBUM_SEARCH_CMD="beet ls -a -p"
	fi
fi

if [ -z "$TRACK_SEARCH_CMD" ]; then
	if [ -x $(command -v beet) ]; then
		TRACK_SEARCH_CMD="beet ls -p"
	fi
fi


if [ -t 0 ]; then
	cli "$@"
else
	append "append-play"
fi
exit 0
